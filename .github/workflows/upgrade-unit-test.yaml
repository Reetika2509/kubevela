name: Upgrade Unit Test
on:
  push:
    branches:
      - master
      - release-*
      - fix/upgrade-test
  pull_request:
    branches:
      - master
      - release-*
      - fix/upgrade-test
  workflow_dispatch: {}
permissions:
  contents: read
env:
  GO_VERSION: '1.23.8'
jobs:
  upgrade-tests:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        k8s-version: ['v1.29.8']
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.k8s-version }}
      cancel-in-progress: true
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            make \
            gcc \
            jq \
            ca-certificates \
            curl \
            gnupg
          sudo snap install kubectl --classic
          sudo snap install helm --classic
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Get dependencies
        run: go get -v -t -d ./...
      - name: Setup KinD with Kubernetes ${{ matrix.k8s-version }}
        run: |
          go install sigs.k8s.io/kind@v0.24.0
          kind delete cluster || true
          kind create cluster --image=kindest/node:${{ matrix.k8s-version }}
      - name: Get latest KubeVela release tag (no v prefix)
        id: get_latest_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/kubevela/kubevela/releases/latest | \
                jq -r ".tag_name" | \
                awk '{sub(/^v/, ""); print}')
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV
      - name: Get Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@v2.14.0
      - name: Add KubeVela Helm repo
        run: |
          helm repo add kubevela https://kubevela.github.io/charts
          helm repo update
      - name: Install KubeVela ${{ env.LATEST_TAG }}
        run: |
          helm install --create-namespace -n vela-system kubevela kubevela/vela-core \
            --version ${{ env.LATEST_TAG }} \
            --timeout 10m \
            --wait
      - name: Post-install status
        run: |
          kubectl get pods -n vela-system
          kubectl rollout status deployment/kubevela-vela-core -n vela-system --timeout=300s
          kubectl get crd applications.core.oam.dev
      - name: Build and load Docker image
        run: |
          mkdir -p $HOME/tmp/
          TMPDIR=$HOME/tmp/ make image-load
      - name: Get commit hash
        id: commit_hash
        run: |
          echo "COMMIT_HASH=git-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Upgrade KubeVela to local image
        run: |
          echo "Starting Helm upgrade for KubeVela..."
          helm upgrade kubevela ./charts/vela-core \
            --namespace vela-system \
            --set image.repository=vela-core-test \
            --set image.tag=${{ env.COMMIT_HASH }} \
            --set image.pullPolicy=IfNotPresent \
            --timeout 10m \
            --wait \
            --debug
          echo "Helm upgrade completed. Fetching deployment status..."
          kubectl rollout status deployment/kubevela-vela-core -n vela-system --timeout=300s
          echo "Deployment status fetched successfully."
      - name: Post-upgrade status
        run: |
          ./bin/vela version
          kubectl get pods -n vela-system
          kubectl rollout status deployment/kubevela-vela-core -n vela-system --timeout=300s
      - name: Debug Helm Installation
        run: |
          echo "Fetching Kubernetes events for vela-system namespace..."
          kubectl get events -n vela-system
          echo "Describing all resources in vela-system namespace..."
          kubectl describe all -n vela-system
          echo "Fetching logs for pods in vela-system namespace..."
          for pod in $(kubectl get pods -n vela-system -o jsonpath='{.items[*].metadata.name}'); do
            echo "--- Logs for $pod ---"
            kubectl logs $pod -n vela-system || true
          done
      - name: Retry Helm Upgrade with Debug Logs
        if: false # Disabling this step as retry mechanism is removed
